create tablespace some_temp_tablespace location '@testtablespace@_temp_tablespace';
create tablespace some_default_tablespace location '@testtablespace@_default_tablespace';

-- Given I've set up GUCS for how to use tablespaces
set temp_tablespaces to some_temp_tablespace;
set default_tablespace to 'some_default_tablespace';

-- When I create a temporary table
create temporary table some_table_in_temp_tablespace (a int);
-- Then the temp_tablespaces settings should be used
select count(1) from pg_class inner join pg_tablespace ON pg_class.reltablespace = pg_tablespace.oid where spcname = 'some_temp_tablespace' AND relname = 'some_table_in_temp_tablespace';

-- And the temp_tablespaces should be used on the segments too
select count(1) from gp_dist_random('pg_class') segment_pg_class inner join pg_tablespace on pg_tablespace.oid = segment_pg_class.reltablespace where relname = 'some_table_in_temp_tablespace' and spcname = 'some_temp_tablespace';

-- When I create a non-temporary table, the default_tablespace should be chosen
create table some_non_temp_table (a int);
select count(1) from pg_class inner join pg_tablespace ON pg_class.reltablespace = pg_tablespace.oid where spcname = 'some_default_tablespace' AND relname = 'some_non_temp_table';

-- And the default_tablespace should be used on the segments too
select count(1) from gp_dist_random('pg_class') segment_pg_class inner join pg_tablespace on pg_tablespace.oid = segment_pg_class.reltablespace where relname = 'some_non_temp_table' and spcname = 'some_default_tablespace';

drop table some_table_in_temp_tablespace;
drop table some_non_temp_table;
drop tablespace some_temp_tablespace;
drop tablespace some_default_tablespace;
reset default_tablespace;
reset temp_tablespaces;

-- When the GUC temp_tablespaces is set, one of the temp tablespaces is used instead of the default tablespace.
-- create several tablespaces and use them as temp tablespaces
-- all QD/QEs in one session should have the same temp tablespace
create tablespace mytempsp0 location '@testtablespace@_mytempsp0';
create tablespace mytempsp1 location '@testtablespace@_mytempsp1';
create tablespace mytempsp2 location '@testtablespace@_mytempsp2';
create tablespace mytempsp3 location '@testtablespace@_mytempsp3';
create tablespace mytempsp4 location '@testtablespace@_mytempsp4';
-- temp_tablespaces will synchronized to all segments
set temp_tablespaces=mytempsp0;

--start_ignore
CREATE EXTENSION IF NOT EXISTS plpythonu;
--end_ignore
CREATE OR REPLACE FUNCTION gp_tablespace_watch_start(dbid int, name text, location text)
    RETURNS void
    EXECUTE ON ALL SEGMENTS
AS $$
import subprocess
output = '/tmp/gp_temp_tablespaces_dbid%d_%s' % (dbid, name)
cmd = "/tmp/file_monitor %s | tee -a /tmp/gp_temp_tablespaces_dbid%d.log > %s &" % (location, dbid, output)
cmd = ["bash", "-c", cmd]
process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
rc = process.wait()
if rc != 0:
    output, error = process.communicate()
    raise Exception("error=%s" % str(error))
$$ LANGUAGE plpythonu;

CREATE OR REPLACE FUNCTION gp_tablespace_watch_log(dbid int, message text)
    RETURNS void
    EXECUTE ON ALL SEGMENTS
AS $$
import subprocess
cmd = "echo \"%s\" >> /tmp/gp_temp_tablespaces_dbid%d.log" % (message, dbid)
cmd = ["bash", "-c", cmd]
process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
rc = process.wait()
if rc != 0:
    output, error = process.communicate()
    raise Exception("error=%s" % str(error))
$$ LANGUAGE plpythonu;

CREATE OR REPLACE FUNCTION gp_tablespace_watch_stop()
    RETURNS void
    EXECUTE ON ALL SEGMENTS
AS $$
import subprocess
cmd = "pkill file_monitor"
cmd = ["bash", "-c", cmd]
process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
process.wait()
$$ LANGUAGE plpythonu;

CREATE OR REPLACE FUNCTION gp_tablespace_watch_match(dbid int, name text, patstr text)
    RETURNS int
    EXECUTE ON ALL SEGMENTS
AS $$
import subprocess
script = '''grep "%s" '/tmp/gp_temp_tablespaces_dbid%d_%s' | wc -l''' % (patstr, dbid, name)
cmd = ["bash", "-c", script]
process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
rc = process.wait()
output, error = process.communicate()
if rc != 0:
    raise Exception("error=%s" % str(error))
return int(str(output).strip())
$$ LANGUAGE plpythonu;


CREATE OR REPLACE FUNCTION gp_temptablespace_path(tblspcOid Oid)
    RETURNS text
    EXECUTE ON ALL SEGMENTS
AS '@abs_builddir@/regress.so', 'gp_tablespace_tmppath'
    LANGUAGE C;


CREATE TABLE tts_foo (a int, b int) distributed by(a);
CREATE TABLE tts_bar (c int, d int) distributed by(d);
CREATE TABLE tts_jazz(e int, f int) distributed by(e);
CREATE TABLE tts_aggspill (i int, j int, t text) distributed by (i);
CREATE TABLE tts_testsiscm (i1 int, i2 int, i3 int, i4 int) distributed by(i1);


insert into tts_foo select i, i from generate_series(1,1000000)i;
insert into tts_bar select i, i from generate_series(6000,120000)i;
insert into tts_jazz select i, i from generate_series(4000,150000)i;

insert into tts_aggspill select i, i*2, i::text from generate_series(1, 10000) i;
insert into tts_aggspill select i, i*2, i::text from generate_series(1, 100000) i;
insert into tts_aggspill select i, i*2, i::text from generate_series(1, 1000000) i;

insert into tts_testsiscm select i, i % 1000, i % 100000, i % 75 from
  (select generate_series(1, nsegments * 150000) as i from
    (select count(*) as nsegments from gp_segment_configuration where role='p' and content >= 0) foo) bar;

ANALYZE tts_foo;
ANALYZE tts_bar;
ANALYZE tts_jazz;
ANALYZE tts_aggspill;
ANALYZE tts_testsiscm;

set gp_cte_sharing=on;
-- set small statement_mem, so temp files are generated by some queries,
-- like join/agg/share input scan, etc.
set statement_mem = '2MB';
-- this query should trigger the directory pgsql_tmp created
with out11 as (
    SELECT * FROM (
      WITH cte(a,b) AS (SELECT a-1, b+1 FROM tts_foo)
      SELECT * FROM (SELECT * FROM cte UNION ALL SELECT * FROM cte) AS X JOIN tts_bar ON b = c
      UNION ALL SELECT *, 1, 2 FROM cte
    ) AS XY
    JOIN tts_jazz on c = e AND b = f
)
select count(*) from out11;

select dattablespace from pg_database where datname=current_database();

-- show the directories for the default tablespace and temp tablespace.
-- start_ignore
select gp_temptablespace_path((select dattablespace from pg_database where datname=current_database() limit 1));
select gp_temptablespace_path((select oid from pg_tablespace where spcname='mytempsp0' limit 1));
-- end_ignore

select gp_tablespace_watch_start(gp_execution_dbid(), 'default', gp_temptablespace_path((select dattablespace from pg_database where datname=current_database() limit 1)));
select gp_tablespace_watch_start(gp_execution_dbid(), 'temp', gp_temptablespace_path((select oid from pg_tablespace where spcname='mytempsp0' limit 1)));

-- ShareInputScan across multiple slices, they should access the same
-- temp tablespace.
with out11 as (
    SELECT * FROM (
      WITH cte(a,b) AS (SELECT a-1, b+1 FROM tts_foo)
      SELECT * FROM (SELECT * FROM cte UNION ALL SELECT * FROM cte) AS X JOIN tts_bar ON b = c
      UNION ALL SELECT *, 1, 2 FROM cte
    ) AS XY
    JOIN tts_jazz on c = e AND b = f
)
select count(*) from out11;
-- optional: to separator the logged messages about created event
select gp_tablespace_watch_log(gp_execution_dbid(), '[temp_tablespace]: separator 1 ]');

set statement_mem='1MB';
select count(*) from (select i, count(*) from tts_aggspill group by i,j,t having count(*) = 3) g;
--start_ignore
-- ignore the output, we only need the following query to spill on Sort
explain analyze select i1, count(distinct(i4)), count(1), count(distinct(i2)) , count(distinct(i3))
    from tts_testsiscm group by i1 order by 3,4,5 desc;
--end_ignore

set optimizer = off;
set statement_mem='3MB';
select count(*) from (with ctesisc as
  (select count(i1) as c1, i2 as c2, i3 as c3 from tts_testsiscm group by i2, i3)
  select *
  from ctesisc as t1, ctesisc as t2
  where t1.c1 = t2.c1 and t1.c3 = t2.c3) foo;


select gp_tablespace_watch_stop();
select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_HashJoin') > 0 as "exist";
select gp_tablespace_watch_match(gp_execution_dbid(), 'temp', '_HashJoin') > 0 as "exist";

select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_SIRW_') > 0 as "exist";
select gp_tablespace_watch_match(gp_execution_dbid(), 'temp', '_SIRW_') > 0 as "exist";
select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_Sort_') > 0 as "exist";
select gp_tablespace_watch_match(gp_execution_dbid(), 'temp', '_Sort_') > 0 as "exist";

-- temp files in hash aggregate should reside in the temp tablespace.
select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_HashAggregate_') > 0 as "exist";
select gp_tablespace_watch_match(gp_execution_dbid(), 'temp', '_HashAggregate_') > 0 as "exist";

reset optimizer;
-- set a list as temp_tablespaces to verify that temp files across slices can work.
select gp_tablespace_watch_log(gp_execution_dbid(), '[SET - use multiple temp tablespaces]');
set statement_mem='2MB';
set temp_tablespaces=mytempsp0,mytempsp1,mytempsp2,mytempsp3,mytempsp4;
with out11 as (
    SELECT * FROM (
      WITH cte(a,b) AS (SELECT a-1, b+1 FROM tts_foo)
      SELECT * FROM (SELECT * FROM cte UNION ALL SELECT * FROM cte) AS X JOIN tts_bar ON b = c
      UNION ALL SELECT *, 1, 2 FROM cte
    ) AS XY
    JOIN tts_jazz on c = e AND b = f
)
select count(*) from out11;

set statement_mem = '1MB';
-- hash aggregate should spill on the default tablespace.
select count(*) from (select i, count(*) from tts_aggspill group by i,j,t having count(*) = 3) g;
select gp_tablespace_watch_log(gp_execution_dbid(), '[RESET - use default temp tablespace]');

set optimizer = off;
set statement_mem='3MB';
select count(*) from (with ctesisc as
  (select count(i1) as c1, i2 as c2, i3 as c3 from tts_testsiscm group by i2, i3)
  select *
  from ctesisc as t1, ctesisc as t2
  where t1.c1 = t2.c1 and t1.c3 = t2.c3) foo;

-- After we unset temp_tablespaces, the temp files should be generated in the default tablespace
set statement_mem='2MB';
set temp_tablespaces to '';
show temp_tablespaces;

select gp_tablespace_watch_start(gp_execution_dbid(), 'default', gp_temptablespace_path((select dattablespace from pg_database where datname=current_database() limit 1)));
with out11 as (
    SELECT * FROM (
      WITH cte(a,b) AS (SELECT a-1, b+1 FROM tts_foo)
      SELECT * FROM (SELECT * FROM cte UNION ALL SELECT * FROM cte) AS X JOIN tts_bar ON b = c
      UNION ALL SELECT *, 1, 2 FROM cte
    ) AS XY
    JOIN tts_jazz on c = e AND b = f
)
select count(*) from out11;
-- optional: separate logged messages about created events.
select gp_tablespace_watch_log(gp_execution_dbid(), '[temp_tablespace]: separator 2 ]');

set statement_mem='1MB';
-- hash aggregate should spill on the default tablespace.
select count(*) from (select i, count(*) from tts_aggspill group by i,j,t having count(*) = 3) g;
--start_ignore
-- ignore the output, we only need the following query to spill on Sort
explain analyze select i1, count(distinct(i4)), count(1), count(distinct(i2)) , count(distinct(i3))
    from tts_testsiscm group by i1 order by 3,4,5 desc;
--end_ignore

set optimizer = off;
set statement_mem='3MB';
select count(*) from (with ctesisc as
  (select count(i1) as c1, i2 as c2, i3 as c3 from tts_testsiscm group by i2, i3)
  select *
  from ctesisc as t1, ctesisc as t2
  where t1.c1 = t2.c1 and t1.c3 = t2.c3) foo;

select gp_tablespace_watch_stop();
select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_HashJoin') > 0 as "exist";
select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_SIRW_') > 0 as "exist";
-- temp files in hash aggregate should reside in the temp tablespace.
select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_HashAggregate_') > 0 as "exist";
select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_Sort_') > 0 as "exist";


drop table tts_foo, tts_bar, tts_jazz, tts_aggspill, tts_testsiscm;
drop tablespace mytempsp0;
drop tablespace mytempsp1;
drop tablespace mytempsp2;
drop tablespace mytempsp3;
drop tablespace mytempsp4;

-- test for Github Issue 12871
create tablespace space_12871 location '@testtablespace@_space_12871';
set temp_tablespaces = space_12871;
DO
$$
    DECLARE l_rec RECORD;
    BEGIN
        CREATE TEMPORARY TABLE tmp_table_12871
        (
            key VARCHAR NOT NULL,
            value   VARCHAR NOT NULL
        )   DISTRIBUTED RANDOMLY;
        INSERT INTO tmp_table_12871  VALUES ('a',1),('b',2);
        FOR l_rec IN ( SELECT key, value
                       FROM tmp_table_12871
                       )
            LOOP
                RAISE NOTICE 'ok';
            END LOOP;
    END;
$$;
drop table tmp_table_12871;
drop tablespace space_12871;

