-- Test external table as left child of union all with replicated table
CREATE EXTERNAL TABLE multilocation_external_table(a INTEGER)
location ('file://@hostname@@abs_srcdir@/data/location1.csv', 'file://@hostname@@abs_srcdir@/data/location2.csv', 'file://@hostname@@abs_srcdir@/data/location3.csv')
ON ALL FORMAT 'text';
CREATE EXTERNAL TABLE one_external_table(a INTEGER)
location ('file://@hostname@@abs_srcdir@/data/location2.csv')
ON SEGMENT 2 FORMAT 'text';
CREATE TABLE simple_replicated_table(a integer) DISTRIBUTED REPLICATED;
INSERT INTO simple_replicated_table VALUES (1);
CREATE TABLE simple_distributed_table(a integer) DISTRIBUTED BY (a);
INSERT INTO simple_distributed_table VALUES (2);
EXPLAIN SELECT A FROM multilocation_external_table UNION ALL SELECT A FROM simple_replicated_table;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Append  (cost=0.00..31001.01 rows=1000001 width=4)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..31000.00 rows=1000000 width=4)
         ->  External Scan on multilocation_external_table  (cost=0.00..11000.00 rows=333334 width=4)
   ->  Gather Motion 1:1  (slice2; segments: 1)  (cost=1.01..1.01 rows=1 width=4)
         ->  Seq Scan on simple_replicated_table  (cost=0.00..1.01 rows=1 width=4)
 Optimizer: Postgres query optimizer
(6 rows)

SELECT A FROM multilocation_external_table UNION ALL SELECT A FROM simple_replicated_table;
 a 
---
 2
 1
 3
 1
(4 rows)

EXPLAIN SELECT A FROM simple_replicated_table UNION ALL SELECT A FROM multilocation_external_table;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Append  (cost=1.01..31001.01 rows=1000001 width=4)
   ->  Gather Motion 1:1  (slice1; segments: 1)  (cost=1.01..1.01 rows=1 width=4)
         ->  Seq Scan on simple_replicated_table  (cost=0.00..1.01 rows=1 width=4)
   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..31000.00 rows=1000000 width=4)
         ->  External Scan on multilocation_external_table  (cost=0.00..11000.00 rows=333334 width=4)
 Optimizer: Postgres query optimizer
(6 rows)

SELECT A FROM simple_replicated_table UNION ALL SELECT A FROM multilocation_external_table;
 a 
---
 2
 1
 3
 1
(4 rows)

EXPLAIN SELECT A FROM simple_replicated_table UNION ALL SELECT a FROM multilocation_external_table UNION ALL SELECT A FROM simple_distributed_table;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Append  (cost=1.01..31002.04 rows=1000002 width=4)
   ->  Gather Motion 1:1  (slice1; segments: 1)  (cost=1.01..1.01 rows=1 width=4)
         ->  Seq Scan on simple_replicated_table  (cost=0.00..1.01 rows=1 width=4)
   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..31000.00 rows=1000000 width=4)
         ->  External Scan on multilocation_external_table  (cost=0.00..11000.00 rows=333334 width=4)
   ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1.03 rows=1 width=4)
         ->  Seq Scan on simple_distributed_table  (cost=0.00..1.01 rows=1 width=4)
 Optimizer: Postgres query optimizer
(8 rows)

SELECT A FROM simple_replicated_table UNION ALL SELECT a FROM multilocation_external_table UNION ALL SELECT A FROM simple_distributed_table;
 a 
---
 1
 2
 2
 1
 3
(5 rows)

EXPLAIN SELECT A FROM simple_distributed_table UNION ALL SELECT a FROM multilocation_external_table UNION ALL SELECT A FROM simple_replicated_table;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Append  (cost=0.00..31002.04 rows=1000002 width=4)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..1.03 rows=1 width=4)
         ->  Seq Scan on simple_distributed_table  (cost=0.00..1.01 rows=1 width=4)
   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..31000.00 rows=1000000 width=4)
         ->  External Scan on multilocation_external_table  (cost=0.00..11000.00 rows=333334 width=4)
   ->  Gather Motion 1:1  (slice3; segments: 1)  (cost=1.01..1.01 rows=1 width=4)
         ->  Seq Scan on simple_replicated_table  (cost=0.00..1.01 rows=1 width=4)
 Optimizer: Postgres query optimizer
(8 rows)

SELECT A FROM simple_distributed_table UNION ALL SELECT a FROM multilocation_external_table UNION ALL SELECT A FROM simple_replicated_table;
 a 
---
 2
 3
 1
 2
 1
(5 rows)

EXPLAIN SELECT * FROM one_external_table UNION ALL SELECT a FROM simple_replicated_table;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Append  (cost=0.00..31001.01 rows=1000001 width=4)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..31000.00 rows=1000000 width=4)
         ->  External Scan on one_external_table  (cost=0.00..11000.00 rows=333334 width=4)
   ->  Gather Motion 1:1  (slice2; segments: 1)  (cost=1.01..1.01 rows=1 width=4)
         ->  Seq Scan on simple_replicated_table  (cost=0.00..1.01 rows=1 width=4)
 Optimizer: Postgres query optimizer
(6 rows)

SELECT * FROM one_external_table UNION ALL SELECT a FROM simple_replicated_table;
 a 
---
 1
 2
(2 rows)

