--
-- Extra GPDB tests on INSERT/UPDATE/DELETE RETURNING
--
CREATE TABLE returning_parttab (distkey int4, partkey int4, i int, t text)
DISTRIBUTED BY (distkey)
PARTITION BY RANGE (partkey) (START (1) END (10));
NOTICE:  CREATE TABLE will create partition "returning_parttab_1_prt_1" for table "returning_parttab"
--
-- Test INSERT RETURNING with partitioning
--
insert into returning_parttab values (1, 1, 1, 'single insert') returning *;
 distkey | partkey | i |       t       
---------+---------+---+---------------
       1 |       1 | 1 | single insert
(1 row)

insert into returning_parttab
select 1, g, g, 'multi ' || g from generate_series(1, 5) g
returning distkey, partkey, i, t;
 distkey | partkey | i |    t    
---------+---------+---+---------
       1 |       1 | 1 | multi 1
       1 |       2 | 2 | multi 2
       1 |       3 | 3 | multi 3
       1 |       4 | 4 | multi 4
       1 |       5 | 5 | multi 5
(5 rows)

-- Drop a column, and create a new partition. The new partition will not have
-- the dropped column, while in the old partition, it's still physically there,
-- just marked as dropped. Make sure the executor maps the columns correctly.
ALTER TABLE returning_parttab DROP COLUMN i;
alter table returning_parttab add partition newpart start (10) end (20);
NOTICE:  CREATE TABLE will create partition "returning_parttab_1_prt_newpart" for table "returning_parttab"
insert into returning_parttab values (1, 10, 'single2 insert') returning *;
 distkey | partkey |       t        
---------+---------+----------------
       1 |      10 | single2 insert
(1 row)

insert into returning_parttab select 2, g + 10, 'multi2 ' || g from generate_series(1, 5) g
returning distkey, partkey, t;
 distkey | partkey |    t     
---------+---------+----------
       2 |      11 | multi2 1
       2 |      12 | multi2 2
       2 |      13 | multi2 3
       2 |      14 | multi2 4
       2 |      15 | multi2 5
(5 rows)

--
-- Test UPDATE/DELETE RETURNING with partitioning
--
update returning_parttab set partkey = 9 where partkey = 3 returning *;
 distkey | partkey |    t    
---------+---------+---------
       1 |       9 | multi 3
(1 row)

update returning_parttab set partkey = 19 where partkey = 13 returning *;
 distkey | partkey |    t     
---------+---------+----------
       2 |      19 | multi2 3
(1 row)

-- update that moves the tuple across partitions (not supported)
update returning_parttab set partkey = 18 where partkey = 4 returning *;
ERROR:  moving tuple from partition "returning_parttab_1_prt_1" to partition "returning_parttab_1_prt_newpart" not supported  (seg0 slice1 127.0.0.1:40000 pid=5753)
-- delete
delete from returning_parttab where partkey = 14 returning *;
 distkey | partkey |    t     
---------+---------+----------
       2 |      14 | multi2 4
(1 row)

-- Check table contents, to be sure that all the commands did what they claimed.
select * from returning_parttab;
 distkey | partkey |       t        
---------+---------+----------------
       1 |       1 | single insert
       1 |       1 | multi 1
       1 |       2 | multi 2
       1 |       4 | multi 4
       1 |       5 | multi 5
       1 |       9 | multi 3
       1 |      10 | single2 insert
       2 |      11 | multi2 1
       2 |      12 | multi2 2
       2 |      15 | multi2 5
       2 |      19 | multi2 3
(11 rows)

--
-- Test UPDATE RETURNING with a split update, i.e. an update of the distribution
-- key.
--
CREATE TEMP TABLE returning_disttest (id int4) DISTRIBUTED BY (id);
INSERT INTO returning_disttest VALUES (1), (2);
-- Disable QUIET mode, so that we get some testing of the command tag as well.
-- (At one point, each split update incorrectly counted as two updated rows.)
\set QUIET off
UPDATE returning_disttest SET id = id + 1;
UPDATE 2
SELECT * FROM returning_disttest;
 id 
----
  3
  2
(2 rows)

--
-- Test returning ctid with trigger
--
CREATE TABLE returning_ctid (f1 serial, f2 text) DISTRIBUTED BY (f1);
CREATE TABLE
-- Create function used by trigger
CREATE FUNCTION trig_row_before_insupdate() RETURNS TRIGGER AS $$
  BEGIN
    NEW.f2 := NEW.f2 || ' triggered !';
    RETURN NEW;
  END
$$ language plpgsql;
CREATE FUNCTION
-- Create trigger for each row insert or update
CREATE TRIGGER trig_row_before BEFORE INSERT OR UPDATE ON returning_ctid
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
CREATE TRIGGER
-- Check returning sys attribute on insert 
INSERT INTO returning_ctid(f2) VALUES ('test') RETURNING ctid;
 ctid  
-------
 (0,1)
(1 row)

INSERT 0 1
SELECT *, ctid FROM returning_ctid;
 f1 |        f2        | ctid  
----+------------------+-------
  1 | test triggered ! | (0,1)
(1 row)

-- Clean up
DROP TRIGGER trig_row_before ON returning_ctid;
DROP TRIGGER
DROP FUNCTION trig_row_before_insupdate() CASCADE;
DROP FUNCTION
DROP TABLE returning_ctid;
DROP TABLE
--
-- Test returning ctid with trigger for AOCO table
--
CREATE TABLE returning_ctid_aoco (f1 serial, f2 text) WITH (appendonly=true, orientation=column) DISTRIBUTED BY (f1);
CREATE TABLE
-- Create function used by trigger
CREATE FUNCTION trig_row_before_insupdate() RETURNS TRIGGER AS $$
  BEGIN
    NEW.f2 := NEW.f2 || ' triggered !';
    RETURN NEW;
  END
$$ language plpgsql;
CREATE FUNCTION
-- Create trigger for each row insert
CREATE TRIGGER trig_row_before BEFORE INSERT ON returning_ctid_aoco
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
CREATE TRIGGER
-- Check returning sys attribute on insert
INSERT INTO returning_ctid_aoco(f2) VALUES ('test') RETURNING ctid;
     ctid     
--------------
 (33554432,2)
(1 row)

INSERT 0 1
SELECT *, ctid FROM returning_ctid_aoco;
 f1 |        f2        |     ctid     
----+------------------+--------------
  1 | test triggered ! | (33554432,2)
(1 row)

-- Clean up
DROP TRIGGER trig_row_before ON returning_ctid_aoco;
DROP TRIGGER
DROP FUNCTION trig_row_before_insupdate() CASCADE;
DROP FUNCTION
DROP TABLE returning_ctid_aoco;
DROP TABLE
