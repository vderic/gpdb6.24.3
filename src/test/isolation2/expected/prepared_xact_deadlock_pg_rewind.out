-- Test a recovered (in startup) prepared transaction does not block
-- pg_rewind due to lock conflict of database template1 when it runs the single
-- mode instance to ensure clean shutdown on the target postgres instance.
include: helpers/server_helpers.sql;
CREATE

-- set GUCs to speed-up the test
1: alter system set gp_fts_probe_retries to 2;
ALTER
1: alter system set gp_fts_probe_timeout to 5;
ALTER
1: select pg_reload_conf();
 pg_reload_conf 
----------------
 t              
(1 row)

1: CREATE EXTENSION IF NOT EXISTS gp_inject_fault;
CREATE
1: select gp_inject_fault('after_xlog_xact_prepare_flushed', 'suspend', dbid) from gp_segment_configuration where role='p' and content = 0;
 gp_inject_fault 
-----------------
 Success:        
(1 row)
2&: create database db_orphan_prepare;  <waiting ...>
1: select gp_wait_until_triggered_fault('after_xlog_xact_prepare_flushed', 1, dbid) from gp_segment_configuration where role='p' and content = 0;
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)

-- immediate shutdown the primary and then promote the mirror.
1: select pg_ctl((select datadir from gp_segment_configuration c where c.role='p' and c.content=0), 'stop');
 pg_ctl 
--------
 OK     
(1 row)
1: select gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)
1: select content, preferred_role, role, status, mode from gp_segment_configuration where content = 0;
 content | preferred_role | role | status | mode 
---------+----------------+------+--------+------
 0       | p              | m    | d      | n    
 0       | m              | p    | u      | n    
(2 rows)

-- wait until promote is finished.
0U: select 1;
 ?column? 
----------
 1        
(1 row)
0Uq: ... <quitting>
2<:  <... completed>
ERROR:  Error on receive from seg0 10.152.8.141:7002 pid=20285: server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.

-- restore the cluster. Previously there is a bug the incremental recovery
-- hangs in pg_rewind due to lock conflict. pg_rewinds runs a single-mode
-- postgres to ensure clean shutdown of the postgres. That will recover the
-- unhandled prepared transactions into memory which will hold locks. For
-- example, "create database" will hold the lock of template1 on pg_database
-- with mode 5, but that conflicts with the mode 3 lock which is needed during
-- postgres starting in InitPostgres() and thus pg_rewind hangs forever.
!\retcode gprecoverseg -a;
(exited with code 0)
select wait_until_all_segments_synchronized();
 wait_until_all_segments_synchronized 
--------------------------------------
 OK                                   
(1 row)
!\retcode gprecoverseg -ar;
(exited with code 0)
select wait_until_all_segments_synchronized();
 wait_until_all_segments_synchronized 
--------------------------------------
 OK                                   
(1 row)

-- reset fts GUCs.
3: alter system reset gp_fts_probe_retries;
ALTER
3: alter system reset gp_fts_probe_timeout;
ALTER
3: select pg_reload_conf();
 pg_reload_conf 
----------------
 t              
(1 row)
