-- @Description Tests segment file logical EOF.
--

-- start_matchsubs
--
-- # create a match/subs expression
--
-- m/ERROR:.*server closed the connection unexpectedly/
-- s/ERROR:.*server closed the connection unexpectedly/ERROR: server closed the connection unexpectedly/gm
-- end_matchsubs
1:CREATE extension if NOT EXISTS gp_inject_fault;

--
-- Check that VACUUM truncate uses the latest committed segment eof.
--
-- Configure fault injection.
-- start_ignore
1:SELECT gp_inject_fault('ao_@orientation@_truncate_to_eof', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
1:SELECT gp_inject_fault('ao_@orientation@_truncate_to_eof', 'suspend', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
-- end_ignore
-- Create segment file that requires eof truncate.
1:SET gp_default_storage_options = "appendonly=true, orientation=@orientation@";
1:CREATE TABLE truncate_eof (a int) DISTRIBUTED BY (a);
1:BEGIN;
1:INSERT INTO truncate_eof SELECT generate_series(1, 10);
1:ROLLBACK;
-- Pause VACUUM after an appendonly metadata snapshot has been acquired
-- but before segment file has been locked.
2&:VACUUM truncate_eof;
-- Commit new data in two parallel sessions and move eof.
-- start_ignore
1&:COPY truncate_eof FROM PROGRAM 'printf "1\n2\n3\n4\n5\n6\n7\n8\n9\n10"';
-- end_ignore
3:COPY truncate_eof FROM PROGRAM 'printf "1\n2\n3\n4\n5\n6\n7\n8\n9\n10"';
-- Resume VACUUM.
-- start_ignore
3:SELECT gp_inject_fault('ao_@orientation@_truncate_to_eof', 'resume', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
1<:
-- end_ignore
2<:
-- Validate that segment file is not corrupted.
3:SELECT count(*) FROM truncate_eof;
-- Cleanup.
-- start_ignore
3:SELECT gp_inject_fault('ao_@orientation@_truncate_to_eof', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
-- end_ignore
3:DROP TABLE truncate_eof;
3:RESET gp_default_storage_options;

--
-- Check that VACUUM truncate uses the latest committed segment eof.
-- Test with VACUUM in utility mode.
--
-- Configure fault injection.
-- start_ignore
1:SELECT gp_inject_fault('ao_@orientation@_truncate_to_eof', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
1:SELECT gp_inject_fault('ao_@orientation@_truncate_to_eof', 'suspend', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
-- end_ignore
-- Create segment file that requires eof truncate.
1:SET gp_default_storage_options = "appendonly=true, orientation=@orientation@";
1:CREATE TABLE truncate_eof (a int) DISTRIBUTED RANDOMLY;
1:INSERT INTO truncate_eof SELECT generate_series(1, 10);
1:BEGIN;
1:INSERT INTO truncate_eof SELECT generate_series(1, 30);
1:ROLLBACK;
-- Pause VACUUM after an appendonly metadata snapshot has been acquired
-- but before segment file has been locked.
0U&:VACUUM truncate_eof;
-- Commit new data and move eof.
1:INSERT INTO truncate_eof SELECT generate_series(1, 10);
-- Resume VACUUM.
-- start_ignore
1:SELECT gp_inject_fault('ao_@orientation@_truncate_to_eof', 'resume', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
-- end_ignore
0U<:
-- Validate that segment file is not corrupted.
1:SELECT count(*) FROM truncate_eof;
-- Cleanup.
-- start_ignore
1:SELECT gp_inject_fault('ao_@orientation@_truncate_to_eof', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
-- end_ignore
1:DROP TABLE truncate_eof;
1:RESET gp_default_storage_options;

--
-- Check that VACUUM compaction uses the latest committed segment eof.
--
-- Configure fault injection.
-- start_ignore
1:SELECT gp_inject_fault('ao_@orientation@_compact', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
1:SELECT gp_inject_fault('ao_@orientation@_compact', 'suspend', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
-- end_ignore
-- Create segment file that requires compaction.
1:SET gp_appendonly_compaction_threshold = 10;
1:SET gp_default_storage_options = "appendonly=true, orientation=@orientation@";
1:CREATE TABLE compact (a int);
1:INSERT INTO compact SELECT generate_series(1, 100);
1:DELETE FROM compact WHERE a > 1;
1:ANALYZE compact;
-- Pause VACUUM after an appendonly metadata snapshot has been acquired
-- but before segment file has been locked.
0U&:VACUUM compact;
-- Commit new data and move eof.
1:INSERT INTO compact SELECT generate_series(1, 100);
-- Resume VACUUM.
-- start_ignore
1:SELECT gp_inject_fault('ao_@orientation@_compact', 'resume', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
-- end_ignore
0U<:
-- Validate that a new segment file has a correct amount of rows.
1:SELECT count(*) FROM compact;
-- Cleanup.
-- start_ignore
1:SELECT gp_inject_fault('ao_@orientation@_compact', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
-- end_ignore
1:DROP TABLE compact;
1:RESET gp_appendonly_compaction_threshold;
1:RESET gp_default_storage_options;


--
-- Check that COPY uses the latest committed segment eof.
--
-- Isolation framework doesn't allow us to emulate concurrent utility
-- mode sessions. So we use 'reserved_segno' fault to make COPY on QD
-- use the same 0 segment as utility mode does.
--
-- Configure fault injection.
-- start_ignore
1:SELECT gp_inject_fault('reserved_segno', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p';
1:SELECT gp_inject_fault('ao_@orientation@_insert_init_1', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
1:SELECT gp_inject_fault('ao_@orientation@_insert_init_2', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
1:SELECT gp_inject_fault('reserved_segno', 'skip', dbid)
FROM gp_segment_configuration WHERE role = 'p';
1:SELECT gp_inject_fault('ao_@orientation@_insert_init_1', 'skip', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
1:SELECT gp_inject_fault('ao_@orientation@_insert_init_2', 'suspend', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
-- end_ignore
-- Emulate concurrent segment file modification with COPY command.
1:SET gp_default_storage_options = "appendonly=true, orientation=@orientation@";
1:CREATE TABLE insert_eof(a int) DISTRIBUTED RANDOMLY;
0U&:COPY insert_eof FROM PROGRAM 'printf "1\n2\n3\n4\n5\n6\n7\n8\n9\n10"';
-- start_ignore
1:SELECT gp_inject_fault('ao_@orientation@_insert_init_1', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p';
-- end_ignore
1:COPY insert_eof FROM PROGRAM 'printf "1\n2\n3\n4\n5"';
-- start_ignore
1:SELECT gp_inject_fault('ao_@orientation@_insert_init_2', 'resume', dbid)
FROM gp_segment_configuration WHERE role = 'p';
-- end_ignore
0U<:
-- Validate that segment file has a correct amount of rows.
1:SELECT count(*) FROM insert_eof;
-- Cleanup.
-- start_ignore
1:SELECT gp_inject_fault('ao_@orientation@_insert_init_2', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p';
1:SELECT gp_inject_fault('reserved_segno', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p';
-- end_ignore
1:DROP TABLE insert_eof;
1:RESET gp_default_storage_options;

--
-- Check that we don't have anomalies on concurrent segment file
-- modifications during prepared phase.
--
-- Configure fault injection.
-- start_ignore
1:SELECT gp_inject_fault('after_commit_prepared', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
-- end_ignore
-- Emulate concurrent segment file modification.
1:SET gp_default_storage_options = "appendonly=true, orientation=@orientation@";
1:CREATE TABLE insert_eof(a int) DISTRIBUTED RANDOMLY;
-- start_ignore
1:SELECT gp_inject_fault('after_commit_prepared', 'suspend', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
-- end_ignore
1&:INSERT INTO insert_eof SELECT generate_series(1, 10);
-- Validate that segment file has a correct amount of rows.
2:SELECT count(*) FROM insert_eof;
-- start_ignore
2:SELECT gp_inject_fault('after_commit_prepared', 'resume', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
-- end_ignore
1<:
-- Cleanup.
-- start_ignore
1:SELECT gp_inject_fault('after_commit_prepared', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
-- end_ignore
1:DROP TABLE insert_eof;
1:RESET gp_default_storage_options;

--
-- Check that VACUUM truncate uses the latest committed segment eof, verify AO header CRC,
-- to assert taking a proper snapshot under VACUUM and concurrent insert request. There
-- should be no error message such like:
-- ERROR:  header checksum does not match, expected 0x00000000 and found 0xD49F4AA2  (seg0 slice1 ::1:6002 pid=25179)
-- DETAIL:  Append-Only storage header kind 0 unknown
-- CONTEXT:  Scan of Append-Only Row-Oriented relation 'truncate_eof'. Append-Only segment file 'base/17751/16959.2', block header offset in file = 16, bufferCount 2
--
-- Configure fault injection.
-- start_ignore
1:SELECT gp_inject_fault('ao_@orientation@_truncate_to_eof', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
1:SELECT gp_inject_fault('ao_@orientation@_truncate_to_eof', 'suspend', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
-- end_ignore
-- Create segment file that requires eof truncate.
1:SET gp_default_storage_options = "appendonly=true, orientation=@orientation@";
1:CREATE TABLE truncate_eof (a int) DISTRIBUTED BY (a);
1:BEGIN;
1:INSERT INTO truncate_eof SELECT generate_series(1, 10);
1:ROLLBACK;
-- Pause VACUUM after an appendonly metadata snapshot has been acquired
-- but before segment file has been locked.
2&:VACUUM truncate_eof;
-- Commit new data in two parallel sessions and move eof.
-- start_ignore
1&:COPY truncate_eof FROM PROGRAM 'printf "1\n2\n3\n4\n5\n6\n7\n8\n9\n10"';
-- end_ignore
3:COPY truncate_eof FROM PROGRAM 'printf "1\n2\n3\n4\n5\n6\n7\n8\n9\n10"';
-- Resume VACUUM.
-- start_ignore
3:SELECT gp_inject_fault('ao_@orientation@_truncate_to_eof', 'resume', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
1<:
-- end_ignore
2<:
1:BEGIN;
2:BEGIN;
1:INSERT INTO truncate_eof SELECT generate_series(1, 1);
2:INSERT INTO truncate_eof SELECT generate_series(1, 10);
1:COMMIT;
2:COMMIT;
-- Validate that segment file is not corrupted.
3:SELECT count(*) FROM truncate_eof;
-- Cleanup.
-- start_ignore
3:SELECT gp_inject_fault('ao_@orientation@_truncate_to_eof', 'reset', dbid)
FROM gp_segment_configuration WHERE role = 'p' AND content > -1;
-- end_ignore
3:DROP TABLE truncate_eof;
3:RESET gp_default_storage_options;
