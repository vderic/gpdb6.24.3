-- start_matchsubs
--
-- m/ERROR:  process \d+ is in IDLE state/
-- s/\d+/XXX/g
--
-- m/ERROR:  group \d+ doesn't have enough memory on master, expect:\d+, available:\d+/
-- s/\d+/XXX/g
--
-- m/ERROR:  group \d+ doesn't have enough memory on segment, expect:\d+, available:\d+/
-- s/\d+/XXX/g
--
-- end_matchsubs

CREATE OR REPLACE FUNCTION resGroupPalloc(float) RETURNS int AS
'@abs_builddir@/../regress/regress@DLSUFFIX@', 'resGroupPalloc'
LANGUAGE C READS SQL DATA;

CREATE OR REPLACE FUNCTION hold_memory_by_percent(int, float) RETURNS int AS $$
    SELECT * FROM resGroupPalloc($2)
$$ LANGUAGE sql;

CREATE OR REPLACE FUNCTION hold_memory_by_percent_on_qe(int, float) RETURNS int AS $$
    SELECT resGroupPalloc($2) FROM gp_dist_random('gp_id')
$$ LANGUAGE sql;
-- check whether a query running in the specific group
-- @param pid: the pid of QD
-- @param groupname: resource group id
-- @return bool: true/false indicating whether it the session is in the resource group
-- start_ignore
CREATE LANGUAGE plpythonu;
-- end_ignore

CREATE OR REPLACE FUNCTION is_session_in_group(pid integer, groupname text) RETURNS BOOL AS $$
import subprocess
import pygresql.pg as pg
import time
import re 

conn = pg.connect(dbname="isolation2resgrouptest")
pt = re.compile(r'con(\d+)') 

sql = "select sess_id from pg_stat_activity where pid = '%d'" % pid
result = conn.query(sql).getresult()
session_id = result[0][0] 

sql = "select groupid from gp_toolkit.gp_resgroup_config where groupname='%s'" % groupname
result = conn.query(sql).getresult()
groupid = result[0][0] 

process = subprocess.Popen("ps -ef | grep postgres | grep con%d | grep -v grep | awk '{print $2}'" % session_id, shell=True, stdout=subprocess.PIPE)
session_pids = process.communicate()[0].split('\n')[:-1] 

cgroups_pids = []
path = "@cgroup_mnt_point@/cpu/gpdb/%d/cgroup.procs" % groupid
fd = open(path)
for line in fd.readlines():
    cgroups_pids.append(line.strip('\n'))

return set(session_pids).issubset(set(cgroups_pids))
$$ LANGUAGE plpythonu;

DROP ROLE IF EXISTS role_move_query;
-- start_ignore
DROP RESOURCE GROUP rg_move_query;
-- end_ignore
CREATE RESOURCE GROUP rg_move_query WITH (concurrency=1, cpu_rate_limit=20, memory_limit=20);
CREATE ROLE role_move_query RESOURCE GROUP rg_move_query;

-- test1: cannot move IDLE sessions
1: SET ROLE role_move_query;
1: SET gp_vmem_idle_resource_timeout = 0;
SELECT gp_toolkit.pg_resgroup_move_query(pid, 'admin_group') FROM pg_stat_activity WHERE query LIKE '%gp_vmem_idle_resource_timeout%' AND state = 'idle';
SELECT is_session_in_group(pid, 'admin_group') FROM pg_stat_activity WHERE query LIKE '%gp_vmem_idle_resource_timeout%' AND state = 'idle';

-- test2: cannot move sessions that are waiting for slot
1: SET ROLE role_move_query;
1: BEGIN;
2: SET ROLE role_move_query;
2&: BEGIN;
SELECT gp_toolkit.pg_resgroup_move_query(pid, 'default_group') FROM pg_stat_activity WHERE waiting_reason='resgroup';
SELECT is_session_in_group(pid, 'default_group') FROM pg_stat_activity WHERE waiting_reason='resgroup';
1: END;
2<:
2: END;

-- test3: cannot move sessions that don't have enough memory on QD
CREATE RESOURCE GROUP rg_move_query_mem_small WITH (concurrency=1, cpu_rate_limit=20, memory_limit=10);
CREATE ROLE role_move_query_mem_small RESOURCE GROUP rg_move_query_mem_small;
1: SET ROLE role_move_query;
1: BEGIN;
1: SELECT hold_memory_by_percent(1,1.0);
SELECT gp_toolkit.pg_resgroup_move_query(pid, 'rg_move_query_mem_small') FROM pg_stat_activity WHERE query LIKE '%hold_memory_by_percent%' AND state = 'idle in transaction';
SELECT is_session_in_group(pid, 'rg_move_query_mem_small') FROM pg_stat_activity WHERE query LIKE '%hold_memory_by_percent%' AND state = 'idle in transaction';
1: END;
1q:

-- test4: cannot move sessions that don't have enough memory on QE
1: SET ROLE role_move_query;
1: BEGIN;
1: SELECT hold_memory_by_percent_on_qe(1,1.0);
SELECT gp_toolkit.pg_resgroup_move_query(pid, 'rg_move_query_mem_small') FROM pg_stat_activity WHERE query LIKE '%hold_memory_by_percent_on_qe%' AND state = 'idle in transaction';
SELECT is_session_in_group(pid, 'rg_move_query_mem_small') FROM pg_stat_activity WHERE query LIKE '%hold_memory_by_percent_on_qe%' AND state = 'idle in transaction';
1: END;
1q:

-- test5: move query will wait if the destination group doesn't have slot
1: SET ROLE role_move_query;
1: BEGIN;
1: SELECT hold_memory_by_percent_on_qe(1,0.1);
2: SET ROLE role_move_query_mem_small;
2: BEGIN;
3&: SELECT gp_toolkit.pg_resgroup_move_query(pid, 'rg_move_query_mem_small') FROM pg_stat_activity WHERE query LIKE '%hold_memory_by_percent_on_qe%' AND state = 'idle in transaction';
2: END;
3<:
3: SELECT is_session_in_group(pid, 'rg_move_query_mem_small') FROM pg_stat_activity WHERE query LIKE '%hold_memory_by_percent_on_qe%' AND state = 'idle in transaction';
1: END;
1q:
2q:
3q:

-- test6: the destination group will wake up 'gp_toolkit.pg_resgroup_move_query' when a new slot become available
1: SET ROLE role_move_query;
1&: SELECT pg_sleep(3);
2: SET ROLE role_move_query_mem_small;
2: BEGIN;
2: SELECT hold_memory_by_percent_on_qe(1,0.1);
3&: SELECT gp_toolkit.pg_resgroup_move_query(pid, 'rg_move_query') FROM pg_stat_activity WHERE query LIKE '%hold_memory_by_percent_on_qe%' AND rsgname='rg_move_query_mem_small';
1<:
-- connection 1 finished, it will wake up connection 3
3<:
3: SELECT is_session_in_group(pid, 'rg_move_query') FROM pg_stat_activity WHERE query LIKE '%hold_memory_by_percent_on_qe%' AND state = 'idle in transaction';
2: END;
1q:
2q:
3q:

-- test7: the destination group memory_limit is 0, meaning use the global shared memory
1: ALTER RESOURCE GROUP rg_move_query SET memory_limit 0;
1: SET ROLE role_move_query_mem_small;
1: BEGIN;
1: SELECT hold_memory_by_percent_on_qe(1,0.1);
2: SELECT gp_toolkit.pg_resgroup_move_query(pid, 'rg_move_query') FROM pg_stat_activity WHERE query LIKE '%hold_memory_by_percent_on_qe%' AND rsgname='rg_move_query_mem_small';
2: SELECT is_session_in_group(pid, 'rg_move_query') FROM pg_stat_activity WHERE query LIKE '%hold_memory_by_percent_on_qe%' AND state = 'idle in transaction';
1q:
2q:

DROP ROLE role_move_query;
DROP RESOURCE GROUP rg_move_query;
DROP ROLE role_move_query_mem_small;
DROP RESOURCE GROUP rg_move_query_mem_small;
